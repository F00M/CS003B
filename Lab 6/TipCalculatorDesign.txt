HowTo 3.1 - 
1:
calculate tip based on customer's satisfaction level
set satisfaction level of customer
get satisfaction level
get tip percentage
display satisfaction level and tip amount

2:
TipCalculator tip = new TipCalculator();

tip.setSatisfactionLevel(1)
tip.calculateTip(price)
System.out.println(tip.toString())

3:
/**
 * Calculates tip based on customer's satisfaction level
 */
public class TipCalculator {
    /**
     * Default constructor
     */
    public TipCalculator() {

    }

    /**
     * constructor with satisfaction level of customer
     * @param levelOfSatisfaction satisfaction level
     */
    public TipCalculator(int levelOfSatisfaction) {

    }

    /**
     * calculate tip
     * @param subTotal subtotal
     */
    public void calculateTip(double subTotal) {

    }

    /**
     * gets tip amount
     * @return tip 
     */
    public double getTip() {

    }

    /**
     * set satisfaction level of customer
     *      1: totally satisfied
     *      2: satisfied
     *      3: dissatisfied
     * @param level level of satisfaction
     */
    public void setSatisfationlevel(int level) {

    }

    /**
     * gets satisfaction level of customer
     * @return satisfaction level
     */
    public int getSatisfactionLevel() {

    }

    /**
     * formats string with satisfaction level and tip
     * @return formatted string
     */
    public String toString() {

    }
}



4:
public class TipCalculator {
    public final static double TOPSATISFACTION = 20;    // totally satisfied
    public final static double MIDSATISFACTION = 15;    // satisfied
    public final static double LOWSATISFACTION = 10;    // dissatisfied
    public final static double WARNINGAMOUNT = 200;     // threshold before warning
    public final static double ERRORAMOUNT = 400;       // threshold before error

    private int satisfactionLevel;
    private double tip;
}

5:
public class TipCalculator {
    public TipCalculator() {
        satisfactionLevel = 0;
        tip = 0;
    }

    public TipCalculator(int levelOfSatisfaction) {
        satisfactionLevel = levelOfSatisfaction;
        tip = 0;
    }

    public void calculateTip(double subTotal) {
        double tipAmount = 0;

        switch (satisfactionLevel) {
            case 1:
                tipAmount = TOPSATISFACTION;
                break;

            case 2:
                tipAmount = MIDSATISFACTION;
                break;

            case 3:
                tipAmount = LOWSATISFACTION;
                break;
        
            default:
                break;
        }

        tip = subTotal * (tipAmount / 100.0);
    }

    public double getTip() {
        return tip;
    }

    public void setSatisfationlevel(int level) {
        satisfactionLevel = level;
    }

    public int getSatisfactionLevel() {
        return satisfactionLevel;
    }

    public String toString() {
        return String.format("Tip: %.2f (level: %d)\n", tip, satisfactionLevel);
    }
}






HowTo 5.1 - 
1:
amount higher than 400 or less than 0?

2:
System.out.println("Error: Bill amount is out of range! Please try again.\n");
continue;

3:
else if (amount > 200) {
    System.out.println("Warning: Bill amount is higher than normal.\n");
}

4:
Condition is correct to make sure amount is valid

5:
No duplicates

6:
amount = 500:
- since amount is >400, the first branch will execute
- print "Error: Bill amount is out of range! Please try again."
- iterate through the loop again

amount = 300:
-since amount is <400 but >200, second branch will execute
- print "Warning: Bill amount is higher than normal."
-continue through to asking for satisfaction level

7:
if (total > 400 || total < 0) {
    System.out.println("Error: Bill amount is out of range! Please try again.\n");
    continue;
}
else if (total > 200) {
    System.out.println("Warning: Bill amount is higher than normal.\n");
}



Section 3:
1. What is the input to this program?
    - TipCalculator does not have any input, since it is all handled in the main class
2. How do you validate its data type?
    - Make sure doubles are only accepted for amount by using Scanners method .hasNextDouble()
    - and integers are only accepted for satisfactionLevel by using the method .hasNextInt()
3. How do you validate its range?
    - Make sure that non-negative numbers and numbers below 400 are accepted
4. Create your test cases. Be sure to include boundaries, inside boundaries, and outside boundaries.
    +------------+--------------------------+---------------+
    | Test cases | Expected Output          | Comment       |
    +------------+--------------------------+---------------+
    | 400        | Warning: Bill amount is  | >200 but <400 |
    |            | higher than normal       |               |
    +------------+--------------------------+---------------+
    | 200        | No output; valid answer  | <200          |
    +------------+--------------------------+---------------+
5. What is the output of this program?
    - There is no output for this program, only a method to display the tip and satisfaction level to the user
6. How do you format your output display to the user?
    - We will use a method called toString() that will format the tip and satisfaction level 